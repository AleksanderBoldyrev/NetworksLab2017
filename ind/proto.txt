Протокол обмена сообщениями по сети в приложении индивидуального задания.
Основа протокола – файл API.h, хранящий закодированные команды enum-типа, а также строковые расшифровки этих команд.
Команды: 
1)	START -> после посылки данной команды сервер отправляет код SERV_OK, подтверждающий успешное создание соединения с клиентом.
2)	INIT -> данное состояние существует только для отображения меню клиента (не аутентифицированного).
3)	EXIT -> после посылки данной команды сервер отправляет код SERV_OK, подтверждающий успешный разрыв соединения с клиентом и закрытие сокета.
4)	REG [uname, passw] -> после посылки данной команды и указанных аргументов сервер отправляет код SERV_OK, подтверждающий успешное создание учетной записи пользователя.
5)	LOG [uname, passw] -> после посылки данной команды и указанных аргументов сервер отправляет код SERV_OK, подтверждающий успешный вход в заданную учетную запись.
6)	LUG -> после посылки данной команды сервер отправляет код SERV_OK, подтверждающий успешный выход клиента из учетной записи.
7)	SND [uname, mes] -> после посылки данной команды и указанных аргументов сервер отправляет код SERV_OK, подтверждающий успешное создание сообщения и отправки его указанному клиенту.
8)	DEL_US -> после посылки данной команды сервер отправляет код SERV_OK, подтверждающий успешное удаление пользователя (удаление только учетной записи пользователя, находящегося в системе).
9)	DEL_MES [mesID] -> после посылки данной команды сервер отправляет код SERV_OK, подтверждающий успешное удаление сообщения с данным ID.
10)	SH_UNR -> после посылки данной команды сервер отправляет код SERV_OK, а также все непрочитанные сообщения из почтового ящика.
11)	SH_ALL -> после посылки данной команды сервер отправляет код SERV_OK, а также все сообщения из почтового ящика.
12)	SH_EX [mesID] -> после посылки данной команды сервер отправляет код SERV_OK, а также конкретное сообщение из почтового ящика по данному ID.
13)	RSND [uname, mesID] -> после посылки данной команды сервер отправляет код SERV_OK, подтверждающий успешную пересылку сообщения одним пользователем другому. 
14)	INSYS -> данное состояние существует только для отображения меню клиента (аутентифицированного).
Также во всех указанных случаях сервер имеет возможность послать ответ NO_OPERATION, свидетельствующий об ошибке (например, либо выполнения операции на стороне сервера, либо о том, что были введены некорректные данные, и т.д.).
Все команды отправляются в формате <API[STATE]|numArg|{args|}|>
Все сообщения хранятся в формате ^<id>^<from>^<date/time>^<len>^<state>^, и могут в произвольном количестве передаваться в качестве аргументов. Как сообщения, так и команды сериализуются перед отправкой в строки и десериализуются после получения.
